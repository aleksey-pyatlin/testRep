@model CheatNoteMaker.Models.GenerateHtmlFilesModel

@{
    ViewBag.Title = "Генератор HTML файлов";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@Html.Partial("_BackToCheatNoteList")

<h2>Генератор HTML файлов</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Шпаргалка</legend>
        
        @Html.HiddenFor(model => model.CheatNoteId)
        @Html.HiddenFor(model => model.CheatNoteName)
        @Html.HiddenFor(model => model.CheatNoteItemsTotal)

        <h2>
            @{ Html.RenderAction("CheatNoteInfo", "CheatNoteItems", new { cnid = Model.CheatNoteId, toDetails = true }); }
        </h2>

        <div>
            Количество вопросов: @Html.DisplayFor(model => model.CheatNoteItemsTotal)
        </div>
    </fieldset>
    <fieldset>
        <legend>Настройки генератора</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.FileName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FileName)
            @Html.ValidationMessageFor(model => model.FileName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PartSize)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PartSize)
            @Html.ValidationMessageFor(model => model.PartSize)
        </div>
    </fieldset>
    <p>
        <input type="submit" value="Сгенерировать" />
    </p>
}

@if (Model.HtmlInfos != null && Model.HtmlInfos.Any())
{
    <p>
        <b>
            @Html.ActionLink("Скачать архивом", "DownloadZip", new { cnid = Model.CheatNoteId })
        </b>
    </p>
    
    <table>
        <tr>
            <th>
                Имя файла
            </th>
            <th>
                Размер
            </th>
        </tr>

        @foreach (var file in Model.HtmlInfos)
        {
            var fileName = string.IsNullOrWhiteSpace(file.FileName) ? string.Format("{0}.html", Model.FileName) : file.FileName;
            
            <tr>
                <td>
                    @Html.ActionLink(fileName, "Download", new { id = file.Id })
                </td>
                <td>
                    @string.Format("{0} KB", file.Size / 1024)
                </td>
            </tr>
        }

    </table>
}

@Html.Partial("_BackToCheatNoteList")
